#!/bin/bash

conf_path="$HOME/.config/ncp.conf"
prg_name="$(basename "$0")"
declare server_path
declare local_path
declare mode
options=(
    "-avzh"
    "--progress"
    "--partial"
    "-e"
    "ssh"
)

function debug()
{
    echo "=== Debug Information ==="
    echo "Configuration Path: $conf_path"
    echo "Program Name: $prg_name"
    echo "Local Path: $local_path"
    echo "Rsync Options: ${options[*]}"
    echo
    echo "=== Server Settings ==="
    echo "Server IP: $server_ip"
    echo "Server User: $server_usr"
    echo "Server Path: $server_path"
    echo "Transfer Mode: $mode"
    echo "===================="
}

function right_usage()
{
    echo -e "${prg_name}: usage: ${prg_name} <options> <server_path> <local_path> \
    \n            ${prg_name} <-s|--setup> "
    echo -e " options: \
    \n      -s, --setup        :to set up configuration \
    \n      -d, --download     :to download from server \
    \n      -u, --upload       :to upload   from server "
    exit 3
}

function write_conf()
{
    local server_ip="$1"
    local server_usr="$2"
    
    # Start writing to config file
    {
        echo "server_ip='${server_ip}'"
        echo "server_usr='${server_usr}'"
        echo -n "options=("
        # Write array elements properly quoted
        local first=true
        for opt in "${options[@]}"; do
            if [ "$first" = true ]; then
                echo -n $'\n    '
                first=false
            else
                echo -e '\n    '
            fi
            echo -n "'${opt}'"
        done
        echo $'\n)'
    } > "$conf_path"
}

function is_valid_ip()
{
    local ip=$1

    # Check if IP follows pattern of 4 dot-separated numbers
    if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        # Split IP into octets and verify each number is between 0-255
        IFS='.' read -r -a octets <<< "$ip"
        for octet in "${octets[@]}"; do
            if [ "$octet" -gt 255 ] || [ "$octet" -lt 0 ]; then
                return 1
            fi
        done
        return 0
    else
        return 1
    fi
}

function build_conf()
{
    local server_ip
    local server_usr
    local -a opt

    echo "building config file..."; sleep 0.3

    read -rp "input server ip address: " server_ip
    if ! is_valid_ip "$server_ip" ;
    then
        echo "${prg_name}: ivalid ip address ${server_ip} !"
        exit 2
    fi
    read -rp "input server username: " server_usr
    # Read options as array
    read -ra opt -p "input additional options default to '${options[*]}': "
    
    # Now opt contains an array of the input options
    # Use it or merge with existing options
    if [ ${#opt[@]} -gt 0 ]; then
        if [ "${opt[0]}" = "+=" ]; then
            # Remove += and append remaining elements to existing options
            unset 'opt[0]'
            options+=("${opt[@]}")
        else
            # Replace existing options with new ones
            options=("${opt[@]}")
        fi
    fi
    
    write_conf "$server_ip" "$server_usr"
}

function check_file()
{
    if [ ! -s "$conf_path" ];
    then
        build_conf
    fi
}

function check_var()
{
    local var="$1"
    if [ -z "$var" ];
    then
        right_usage
    fi
}

function fill_paths()
{
    server_path="$1"
    local_path="$2"
}

function fill_down_up()
{
    check_var "$1"; check_var "$2"; fill_paths "$1" "$2"; check_file
    # shellcheck source=$HOME/.config/ncp.conf
    if ! source "$conf_path";
    then
        echo "Error: Failed to load configuration file"
        exit 1
    fi

    mode="u"
    if [[ "$3"  ==  "--download"  || "$3" == "-d" ]];
    then
        mode="d"
    fi
}

function check_rsync() {
    if ! command -v rsync >/dev/null 2>&1; then
        echo "${prg_name}: Error: rsync is required but not installed"
        
        # Detect package manager and suggest installation command
        if command -v apt-get >/dev/null 2>&1; then
            echo "To install on Debian/Ubuntu, run: sudo apt-get install rsync"
        elif command -v dnf >/dev/null 2>&1; then
            echo "To install on Fedora, run: sudo dnf install rsync"
        elif command -v yum >/dev/null 2>&1; then
            echo "To install on CentOS/RHEL, run: sudo yum install rsync"
        elif command -v pacman >/dev/null 2>&1; then
            echo "To install on Arch Linux, run: sudo pacman -S rsync"
        elif command -v zypper >/dev/null 2>&1; then
            echo "To install on openSUSE, run: sudo zypper install rsync"
        else
            echo "Please install rsync using your system's package manager"
        fi
        exit 1
    fi
}

function main() {
    check_rsync
    
    if [ $# -le 0 ]; then
        right_usage
    fi

    case $1 in
    --setup|-s)
    if [ ! -z "$2" ];
    then
        echo "${prg_name}: option $1 takes no arguments"
        right_usage
    fi
        build_conf
        exit 0
    ;;
    --download|--upload|-d|-u)
        fill_down_up "$2" "$3" "$1"
    ;;
    *)
        right_usage
    ;;
    esac

    if [ "$mode" == "d" ];
    then
        # Download
        rsync "${options[@]}" "${server_usr}@${server_ip}:${server_path}" "${local_path}"
    else
        # Upload
        rsync "${options[@]}" "${local_path}" "${server_usr}@${server_ip}:${server_path}"
    fi
}

main "$@"